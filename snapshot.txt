PROJECT SNAPSHOT - yo-logistic
Generated on: $(date)

========================================
FILE: app.json
========================================
{
  "expo": {
    "name": "yo-logistic",
    "slug": "yo-logistic",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "yologistic",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.anonymous.yo-logistic"
    },
    "android": {
      "adaptiveIcon": {
        "backgroundColor": "#E6F4FE",
        "foregroundImage": "./assets/images/android-icon-foreground.png",
        "backgroundImage": "./assets/images/android-icon-background.png",
        "monochromeImage": "./assets/images/android-icon-monochrome.png"
      },
      "edgeToEdgeEnabled": true,
      "predictiveBackGestureEnabled": false
    },
    "web": {
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-splash-screen",
        {
          "image": "./assets/images/splashBg.png",
          "resizeMode": "cover",
          "backgroundColor": "#000000",
          "dark": {
            "backgroundColor": "#000000"
          }
        }
      ],
      "expo-localization"
    ],
    "experiments": {
      "typedRoutes": true,
      "reactCompiler": true
    }
  }
}

========================================
FILE: expo-env.d.ts
========================================
/// <reference types="expo/types" />

// NOTE: This file should not be edited and should be in your git ignore

========================================
FILE: package.json
========================================
{
  "name": "yo-logistic",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web",
    "lint": "expo lint"
  },
  "dependencies": {
    "@expo/vector-icons": "^15.0.2",
    "@react-navigation/bottom-tabs": "^7.4.0",
    "@react-navigation/elements": "^2.6.3",
    "@react-navigation/native": "^7.1.8",
    "expo": "~54.0.13",
    "expo-constants": "~18.0.9",
    "expo-dev-client": "~6.0.15",
    "expo-font": "~14.0.9",
    "expo-haptics": "~15.0.7",
    "expo-image": "~3.0.9",
    "expo-linking": "~8.0.8",
    "expo-localization": "~17.0.7",
    "expo-router": "~6.0.11",
    "expo-splash-screen": "~31.0.10",
    "expo-status-bar": "~3.0.8",
    "expo-symbols": "~1.0.7",
    "expo-system-ui": "~6.0.7",
    "expo-web-browser": "~15.0.8",
    "i18n-js": "^4.5.1",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-native": "0.81.4",
    "react-native-gesture-handler": "~2.28.0",
    "react-native-reanimated": "~4.1.1",
    "react-native-safe-area-context": "~5.6.0",
    "react-native-screens": "~4.16.0",
    "react-native-web": "~0.21.0",
    "react-native-worklets": "0.5.1"
  },
  "devDependencies": {
    "@types/react": "~19.1.0",
    "eslint": "^9.25.0",
    "eslint-config-expo": "~10.0.0",
    "typescript": "~5.9.2"
  },
  "private": true
}

========================================
FILE: app/_layout.tsx
========================================
import { useFonts } from "expo-font";
import { SplashScreen, Stack } from "expo-router";
import { useEffect } from "react";
import "react-native-reanimated";
import CustomSplashScreen from "../components/SplashScreen";

// Prevent the native splash screen from auto-hiding before we are ready.
SplashScreen.preventAutoHideAsync();

export const unstable_settings = {
  initialRouteName: "welcome",
};

export default function RootLayout() {
  const [fontsLoading, fontsError] = useFonts({
    "open-sans-bold": require("@/assets/fonts/OpenSans-Bold.ttf"),
    "open-sans": require("@/assets/fonts/OpenSans-Regular.ttf"),
  });

  useEffect(() => {
    if (fontsLoading || fontsError) {
      SplashScreen.hideAsync();
    }
  }, [fontsLoading, fontsError]);

  if (!fontsLoading && !fontsError) {
    return <CustomSplashScreen />;
  }

  return (
    <Stack screenOptions={{ headerShown: false }}>
      <Stack.Screen name="welcome" />
      <Stack.Screen name="(tabs)" />

      <Stack.Screen
        name="signInRegisterModal"
        options={{ headerShown: false, presentation: "formSheet" }}
      />
    </Stack>
  );
}

========================================
FILE: app/(tabs)/_layout.tsx
========================================
import { Tabs } from "expo-router";

export default function TabLayout() {
  return (
    <Tabs>
      <Tabs.Screen name="(home)" options={{ title: "Home" }} />
      <Tabs.Screen name="map" options={{ title: "Map" }} />
    </Tabs>
  );
}

========================================
FILE: app/(tabs)/(home)/_layout.tsx
========================================
import { Stack } from "expo-router";

export default function HomeLayout() {
  return (
    <Stack>
      <Stack.Screen name="index" options={{ headerShown: false }} />
    </Stack>
  );
}

========================================
FILE: app/(tabs)/(home)/index.tsx
========================================
import { useLocale } from "@/hooks/useLocal";
import { Link } from "expo-router";
import { Text } from "react-native";

export default function HomeScreen() {
  const { t } = useLocale();

  return (
    <>
      <Text>{t("home.title")}</Text>
      <Link href="/signInRegisterModal">
        <Text>Open Modal</Text>
      </Link>
      <Link href="/map">
        <Text>Go to Map</Text>
      </Link>
      <Link href="/welcome">
        <Text>Go to welcome</Text>
      </Link>
    </>
  );
}

========================================
FILE: app/(tabs)/(home)/modal.tsx
========================================
import { useRouter } from "expo-router";
import { Pressable, Text } from "react-native";

export default function ModalScreen() {
  const { dismiss, navigate } = useRouter();

  return (
    <>
      <Text>Modal Screen</Text>
      <Pressable
        onPress={() => {
          console.log("Click");
          dismiss();
          navigate({ pathname: "/map" });
        }}
      >
        <Text>Go to Home</Text>
      </Pressable>
      {/* <Link href="/(tabs)/map">
        <Text>Go to Map</Text>
      </Link> */}
    </>
  );
}

========================================
FILE: app/(tabs)/map/index.tsx
========================================
import { Text } from "react-native";

export default function MapScreen() {
  return <Text>Map Screen</Text>;
}

========================================
FILE: app/signInRegisterModal.tsx
========================================
import { useRouter } from "expo-router";
import { Pressable, Text } from "react-native";

export default function ModalScreen() {
  const { dismiss, navigate } = useRouter();

  return (
    <>
      <Text>Modal Screen</Text>
      <Pressable
        onPress={() => {
          console.log("Click");
          dismiss();
          navigate({ pathname: "/map" });
        }}
      >
        <Text>Go to Home</Text>
      </Pressable>
      {/* <Link href="/(tabs)/map">
        <Text>Go to Map</Text>
      </Link> */}
    </>
  );
}

========================================
FILE: app/welcome.tsx
========================================
import { Colors } from "@/constants/Colors";
import { useState } from "react";
import {
  Image,
  StatusBar,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";

type UserType = "customer" | "driver";

export default function WelcomeScreen() {
  const [selectedType, setSelectedType] = useState<UserType>("driver");

  const handleLogin = () => {
    console.log("login");
  };

  const handleRegister = () => {
    console.log("egister");
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" />

      <View style={styles.imageContainer}>
        <Image
          source={require("../assets/images/welcome.png")}
          style={styles.image}
        />
      </View>

      <View style={styles.bottomCard}>
        <View style={styles.tabContainer}>
          <TouchableOpacity
            style={[
              styles.tab,
              selectedType === "customer" && styles.tabActive,
            ]}
            onPress={() => setSelectedType("customer")}
          >
            <Text
              style={[
                styles.tabText,
                selectedType === "customer" && styles.tabTextActive,
              ]}
            >
              customer
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.tab, selectedType === "driver" && styles.tabActive]}
            onPress={() => setSelectedType("driver")}
          >
            <Text
              style={[
                styles.tabText,
                selectedType === "driver" && styles.tabTextActive,
              ]}
            >
              driver
            </Text>
          </TouchableOpacity>
        </View>

        <View style={styles.buttonContainer}>
          <TouchableOpacity
            style={styles.primaryButton}
            onPress={handleLogin}
            activeOpacity={0.8}
          >
            <Text style={styles.primaryButtonText}>Login</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.secondaryButton}
            onPress={handleRegister}
            activeOpacity={0.8}
          >
            <Text style={styles.secondaryButtonText}>Create Account</Text>
          </TouchableOpacity>
        </View>

        {/* Terms and Privacy */}
        <View style={styles.termsContainer}>
          <Text style={styles.termsText}>
            Terms of Service YoLog <Text style={styles.termsLink}>terms</Text>
            and <Text style={styles.termsLink}>privacyPolicy</Text>.
          </Text>
        </View>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    // backgroundColor: "red",
  },
  imageContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    height: "100%",
    width: "100%",
  },
  image: {
    width: "100%",
    height: "100%",
    resizeMode: "cover",
  },
  bottomCard: {
    backgroundColor: "#FFFFFF",
    borderTopLeftRadius: 30,
    borderTopRightRadius: 30,
    paddingHorizontal: 24,
    paddingTop: 32,
    paddingBottom: 40,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: -4,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 10,
  },
  tabContainer: {
    flexDirection: "row",
    borderRadius: 8,
    padding: 4,
    marginBottom: 32,
  },
  tab: {
    flex: 1,
    paddingVertical: 12,
    alignItems: "center",
    borderRadius: 6,
  },
  tabActive: {
    backgroundColor: "#FFFFFF",
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  tabText: {
    fontSize: 16,
    fontWeight: "600",
    color: "#666",
  },
  tabTextActive: {
    color: "#000",
  },
  buttonContainer: {
    gap: 16,
    marginBottom: 24,
  },
  primaryButton: {
    backgroundColor: Colors.primary,
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: "center",
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  primaryButtonText: {
    fontSize: 18,
    fontWeight: "700",
    color: "#000",
  },
  secondaryButton: {
    backgroundColor: "#F0F0F0",
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: "center",
  },
  secondaryButtonText: {
    fontSize: 18,
    fontWeight: "600",
    color: "#000",
  },
  termsContainer: {
    alignItems: "center",
    paddingHorizontal: 8,
  },
  termsText: {
    fontSize: 12,
    color: "#999",
    textAlign: "center",
    lineHeight: 18,
  },
  termsLink: {
    color: "#000",
    textDecorationLine: "underline",
  },
});

========================================
FILE: components/SplashScreen/index.tsx
========================================
import { useLocale } from "@/hooks/useLocal";
import React from "react";
import { Image, ImageBackground, StyleSheet, View } from "react-native";
import { Text } from "../ui";

const SplashScreen = () => {
  const { t } = useLocale();

  return (
    <ImageBackground
      source={require("@/assets/images/splashBg.png")}
      style={styles.backgroundImage}
      resizeMode="cover"
    >
      <View style={styles.overlay}>
        <View style={styles.contentContainer}>
          <Image
            source={require("@/assets/images/icon.png")}
            style={styles.logo}
            resizeMode="contain"
          />
          <Text style={styles.appName}>{t("appName")}</Text>
        </View>
      </View>
    </ImageBackground>
  );
};

export default SplashScreen;

const styles = StyleSheet.create({
  backgroundImage: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: "rgba(0, 0, 0, 0.76)",
    justifyContent: "center",
    alignItems: "center",
  },
  contentContainer: {
    alignItems: "center",
  },
  logo: {
    width: 100,
    height: 100,
    marginBottom: 12,
  },
  appName: {
    color: "#FFFFFF",
    fontSize: 24,
    fontWeight: "bold",
  },
});

========================================
FILE: components/ui/index.ts
========================================
export { Text } from "./Text";

========================================
FILE: components/ui/Text/index.tsx
========================================
import React from "react";
import { StyleSheet, Text, TextProps } from "react-native";

const CustomText: React.FC<TextProps> = (props) => {
  return <Text {...props} style={[styles.defaultFont, props.style]} />;
};

const styles = StyleSheet.create({
  defaultFont: {
    fontFamily: "open-sans",
  },
});

export { CustomText as Text };

========================================
FILE: constants/Colors.ts
========================================
const Colors = {
  primary: "#E6F44E",
};

export { Colors };

========================================
FILE: hooks/useLocal.ts
========================================
import { getLocales } from "expo-localization";
import { I18n } from "i18n-js";
import { useMemo, useState } from "react";
import en from "../locales/en.json";
import hy from "../locales/hy.json";

// This utility type can remain the same
type TranslationPaths<T> = T extends object
  ? {
      [K in keyof T]: K extends string
        ? T[K] extends object
          ? `${K}.${TranslationPaths<T[K]>}`
          : K
        : never;
    }[keyof T]
  : never;

export type TranslationKey = TranslationPaths<typeof en>;

const i18n = new I18n({
  en,
  hy,
});

// Set the initial locale
i18n.locale = getLocales()[0].languageCode ?? "en";
i18n.enableFallback = true;
i18n.defaultLocale = "en";

export const useLocale = () => {
  const [locale, setLocaleState] = useState(i18n.locale);

  const localeUtils = useMemo(
    () => ({
      t: (scope: TranslationKey, options?: object) =>
        i18n.t(scope, { ...options, locale }),
      setLocale: (newLocale: "en" | "hy") => {
        i18n.locale = newLocale;
        setLocaleState(newLocale);
      },
      locale,
    }),
    [locale]
  );

  return localeUtils;
};

========================================
FILE: locales/en.json
========================================
{
  "welcome": "Welcome to my App!",
  "appName": "Logistic",
  "home": {
    "title": "This is the Home Screen"
  }
}

========================================
FILE: locales/hy.json
========================================
{
  "welcome": "Բարի գալուստ իմ հավելված",
  "appName": "Logistic",
  "home": {
    "title": "Սա Գլխավոր Էկրանն է"
  }
}

========================================
FILE: utils/i18n.ts
========================================
import { getLocales } from "expo-localization";
import { I18n } from "i18n-js";

// Import all your translation files
import en from "../locales/en.json";
import hy from "../locales/hy.json";

// Create a new i18n instance
const i18n = new I18n();

// Set the supported translations
i18n.translations = {
  en,
  hy,
};

// Set the locale once at the beginning of your app.
const deviceLanguage = getLocales()[0].languageCode;
i18n.locale = deviceLanguage ?? "en";

// When a value is missing from a language it'll fallback to another language with the key present.
i18n.enableFallback = true;

// It will default to English if the device's locale is not available.
i18n.defaultLocale = "en";

export default i18n;

========================================
END OF SNAPSHOT
========================================

EXCLUDED FOLDERS AND FILES:
- .expo/
- .vscode/
- ios/
- node_modules/
- scripts/
- .gitignore
- eslint.config.js
- package-lock.json
- README.md
- tsconfig.json

NOTE: Binary files (images, fonts) are not included in this text snapshot.
The following binary files exist in the project:
- assets/fonts/OpenSans-Bold.ttf
- assets/fonts/OpenSans-Regular.ttf
- assets/images/icon.png
- assets/images/splashBg.png
- assets/images/welcome.png
